class Solution {
public:
    int visiblePoints(vector<vector<int>>& points, int angle, vector<int>& location) {
        vector<float> angles;
        int always = 0;

        for (int cntr = 0; cntr < points.size(); cntr++) {
            if (points[cntr][1] == location[1] && points[cntr][0] == location[0]) {
                always++;
                continue;
            }
            float theta = atan2((float)(points[cntr][1] - location[1]), (float)(points[cntr][0] - location[0]));

            if (theta < 0) {
                theta += 2 * M_PI;
            }

            angles.push_back(theta);
        }

        sort(angles.begin(), angles.end());

        float thresh = (M_PI / 180) * angle;

        int n = angles.size();
        for (int i = 0; i < n; i++) {
            angles.push_back(angles[i] + 2 * M_PI);
        }

        int left = 0, right = 0;
        int ans = 0;

        while (left < n && right < 2 * n) {
            if (angles[right] - angles[left] <= thresh) {
                ans = max(ans, right - left + 1);
                right++;
            } else {
                left++;
            }
        }

        // Printing for debugging purposes
        cout << "Final Answer: " << ans + always << endl;
        return ans + always;
    }
};
