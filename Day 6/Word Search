class Solution {
public:
    bool backtrack(vector<vector<char>>& board, string word,int i,int j, int m,int n,int k){
        if(k>=word.size())  return true;
        if(i<0 || i>=m || j<0 || j>=n || word[k]!=board[i][j] || board[i][j]=='.')  return false;
        if(word.size()==1 && word[k]==board[i][j])  return true;
        board[i][j]='.';
        int temp=false;
        int x[4]={0,0,-1,1};
        int y[4]={-1,1,0,0};
        for(int index=0;index<4;index++){
            temp=temp || backtrack(board,word,i+x[index],j+y[index],m,n,k+1);
        }
        board[i][j]=word[k];
        return temp;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int m=board.size();
        int n=board[0].size();
        if(word.size()==0)  return false;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(word[0]==board[i][j])
                    if(backtrack(board,word,i,j,m,n,0)) return true;
            }
        }
        return false;
    }
};
