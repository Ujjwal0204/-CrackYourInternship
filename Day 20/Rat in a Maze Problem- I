//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

// User function template for C++

class Solution {
    void rec(vector<vector<int>> &mat, int i, int j, string ans, vector<string>&result){
        if(i < 0 || i >= mat.size() || j < 0 || j >= mat[0].size() || mat[i][j] == 0){
            return;
        }
        
        if(i == mat.size() - 1 && j == mat[0].size() - 1){
            result.push_back(ans);
            return;
        }
        
        mat[i][j] = 0; 
        
        //up
        rec(mat, i-1, j, ans + "U", result);
        //down
        rec(mat, i+1, j, ans + "D", result);
        //left
        rec(mat, i, j-1, ans + "L", result);
        //right
        rec(mat, i, j+1, ans + "R", result);
        
        mat[i][j] = 1;
    }
  public:
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        string ans = "";
        vector<string> result;
        if (mat.empty() || mat[0].empty() || mat[0][0] == 0) return result;
        rec(mat, 0, 0, ans, result);
        
        return result;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
