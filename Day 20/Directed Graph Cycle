class Solution {
  public:
    // Function to detect cycle in a directed graph.
    
    // using DFS
    // bool detectCycle(int node,vector<bool> &path,vector<bool>&visited,vector<int> adj[]){
    //     visited[node]=1;
    //     path[node]=1;
    //     for(int i=0;i<adj[node].size();i++){
    //         if(path[adj[node][i]])
    //             return 1;
    //         else{
    //             if(!visited[adj[node][i]]&&detectCycle(adj[node][i],path,visited,adj))
    //                 return 1;    
    //         }
    //     }
    //     path[node]=0;
    //     return 0;
    // }
    
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        // vector<bool>visited(V,0);
        // vector<bool>path(V,0);
        // for(int i=0;i<V;i++){
        //     if(!visited[i]&&detectCycle(i,path,visited,adj))
        //         return 1;
        // }
        // return 0;
        
        // using bfs (using Kahn's Algo)
        
        vector<int>inDegree(V,0);
        for(int i=0;i<V;i++){
            for(int j=0;j<adj[i].size();j++)
                inDegree[adj[i][j]]++;
        }
        queue<int>q;
        for(int i=0;i<V;i++){
            if(!inDegree[i])
                q.push(i);
        }
        int count=0;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            count++;
            for(int i=0;i<adj[node].size();i++){
                inDegree[adj[node][i]]--;
                if(!inDegree[adj[node][i]])
                    q.push(adj[node][i]);
            }
        }
        return count!=V;
    }
};
