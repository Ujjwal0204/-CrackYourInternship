class Solution {
public:
    void merge(vector<int> &arr,int l,int mid,int r)
{
    int n1=mid-l+1;
    int n2=r-mid;

    int a[n1];
    int b[n2];
    for(int i=0;i<n1;i++){
        a[i]=arr[l+i];
    }
    for(int i=0;i<n2;i++)
    {
        b[i]=arr[mid+1+i];
    }
    int i=0;
    int j=0;
    int k=l;
    while(i<n1 && j<n2)
    {
        if(a[i]<b[j])
        {
            arr[k]=a[i];
            k++;i++;
        }
        else{
            arr[k]=b[j];
            k++;j++;
        }
    }
    while(i<n1){
        arr[k]=a[i];
        k++;i++;
    }
    while(j<n2)
    {
        arr[k]=b[j];
        k++;j++;
    }
}    
int countPairs(vector<int> &arr,int l,int mid,int r){
    int count=0;
    int right=mid+1;
    for(int i=l;i<=mid;i++){
        while(right<=r && arr[i]>(long long)2*arr[right])
            right++;
        count+=(right-(mid+1));
    }
    return count;
}
int mergeSort(vector<int> &arr,int l,int r)
{
    int count=0;
    if(l<r)
    {
        int mid=(l+r)/2;
        count+=mergeSort(arr,l,mid);
        count+=mergeSort(arr,mid+1,r);
        count+=countPairs(arr,l,mid,r);
        merge(arr,l,mid,r);
    }
    return count;
}
int reversePairs(vector<int>& nums) {
    return mergeSort(nums,0,nums.size()-1);
}
};
