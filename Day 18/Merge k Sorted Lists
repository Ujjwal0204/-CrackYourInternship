2 solutions 
1- Using sorting two lists
2-Using priority queue

1-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if(list1==NULL)    return list2;
        if(list2==NULL)    return list1;
        ListNode* temp=list1;
        if(list1->val>list2->val){
            temp=list2;
            list2=list2->next;
        }
        else{
            list1=list1->next;
        }
        ListNode* temp1=temp;
        while(list1 && list2){
            if(list1->val>list2->val){
                temp1->next=list2;
                list2=list2->next;
            }
            else{
                temp1->next=list1;
                list1=list1->next;
            }
            temp1=temp1->next;
        }
        if(list1)
            temp1->next=list1;
        else    temp1->next=list2;
        return temp;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode *ans=NULL;
        for(int n=0;n<lists.size();n++){
            ans=mergeTwoLists(ans,lists[n]);
        }
        return ans;
    }
};


2-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) {
            return nullptr; // Return NULL if the input is empty
        }

        // Min-heap to store the pairs of (value, ListNode*)
        priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>> pq;

        // Push the head of each list into the priority queue
        for (int i = 0; i < lists.size(); i++) {
            if (lists[i] != nullptr) {
                pq.push({lists[i]->val, lists[i]});
            }
        }

        // Dummy head for the result list
        ListNode* ans = new ListNode(0);
        ListNode* last = ans;

        // Process the priority queue
        while (!pq.empty()) {
            auto a = pq.top();
            pq.pop();
            ListNode* news = a.second;

            // Add the current node to the merged list
            last->next = news;
            last = news;

            // Push the next node of the current list into the priority queue
            if (news->next != nullptr) {
                pq.push({news->next->val, news->next});
            }
        }

        // Return the merged list, which starts from the next of dummy head
        return ans->next;
    }
};
