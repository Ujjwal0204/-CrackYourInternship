/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* findMiddle(ListNode* head){
        ListNode* slowPointer = head;
        ListNode* fastPointer = head->next;

        while (fastPointer != nullptr && fastPointer->next != nullptr) {
            slowPointer = slowPointer->next;
            fastPointer = fastPointer->next->next;
        }

        return slowPointer;
    }
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        if(list1==NULL)    return list2;
        if(list2==NULL)    return list1;
        ListNode* temp=list1;
        if(list1->val>list2->val){
            temp=list2;
            list2=list2->next;
        }
        else{
            list1=list1->next;
        }
        ListNode* temp1=temp;
        while(list1 && list2){
            if(list1->val>list2->val){
                temp1->next=list2;
                list2=list2->next;
            }
            else{
                temp1->next=list1;
                list1=list1->next;
            }
            temp1=temp1->next;
        }
        if(list1)
            temp1->next=list1;
        else    temp1->next=list2;
        return temp;
    }
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL)  return head;
        ListNode* left=head;
        ListNode* mid=findMiddle(head);
        ListNode* right=mid->next;
        mid->next=NULL;

        ListNode* lefthead=sortList(left);
        ListNode* righthead=sortList(right);
        return mergeTwoLists(lefthead,righthead);
    }
};
