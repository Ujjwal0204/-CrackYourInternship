class Solution {
public:
	bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    
	    vector<int> adj[N];
	    vector<int>inDeg(N,0);
	    
	    for(int i=0;i<P;i++){
	        adj[prerequisites[i].second].push_back(prerequisites[i].first);
	        inDeg[prerequisites[i].first]++;
	    }
	    
	    queue<int> q;
	    for(int i=0;i<N;i++){
	        if(!inDeg[i])
	            q.push(i);
	    }
	    int count=0;
	   // using kahn's algo(bfs)
	   while(!q.empty()){
	       int node=q.front();
	       q.pop();
	       count++;
	       
	       for(int i=0;i<adj[node].size();i++){
	           inDeg[adj[node][i]]--;
	           if(!inDeg[adj[node][i]])
	            q.push(adj[node][i]);
	       }
	   }
	   
	  return count==N;

	}
};
