class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
// 	void DFS(int node,stack<int> &stack,vector<int> adj[],vector<bool> &visited){
// 	    visited[node]=1;
// 	    for(int i=0;i<adj[node].size();i++){
// 	        if(!visited[adj[node][i]])
// 	            DFS(adj[node][i],stack,adj,visited);
// 	    }
// 	    stack.push(node);
// 	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // DFS
	   // vector<bool>visited(V,0);
	   // stack<int> s;
	   // for(int i=0;i<V;i++){
	   //     if(!visited[i])
    // 	        DFS(i,s,adj,visited);
	   // }
	   // vector<int>ans;
	   // while(!s.empty()){
	   //     ans.push_back(s.top());
	   //     s.pop();
	   // }
	   // return ans;
	   
	   //Kahn's Algo
	   
	   vector<int>ans;
	   vector<int>inDeg(V,0);
	   
	   for(int i=0;i<V;i++)
	    for(int j=0;j<adj[i].size();j++)
	        inDeg[adj[i][j]]++;
	        
	   queue<int>q;
	   for(int i=0;i<V;i++){
	       if(!inDeg[i])
	        q.push(i);
	   }
	   while(!q.empty()){
	       int node=q.front();
	       q.pop();
	       ans.push_back(node);
	       for(int i=0;i<adj[node].size();i++){
	           inDeg[adj[node][i]]--;
	           if(!inDeg[adj[node][i]])
	            q.push(adj[node][i]);
	       }
	   }
	   return ans;
	}
};
