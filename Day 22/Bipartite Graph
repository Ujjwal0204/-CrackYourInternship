class Solution {
public:

    bool checkBipar(int node,vector<int> adj[],vector<int> &color){
        for(int i=0;i<adj[node].size();i++){
            if(color[adj[node][i]]==-1){
                color[adj[node][i]]=(color[node]+1)%2;
                if(!checkBipar(adj[node][i],adj,color))
                    return 0;
            }
            else{
                if(color[node]==color[adj[node][i]])
                    return 0;
            }
        }
        return 1;
    }
	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    
	   // using dfs
	    vector<int>color(V,-1);
	    
	    for(int i=0;i<V;i++){
	        if(color[i]==-1){
	            color[i]=0;
	            if(!checkBipar(i,adj,color))
	                return 0;
	        }
	    }
	    return 1;
	    
	   // using bfs
	   
	   // vector<int>color(V,-1);
	   // queue<int>q;
	   // for(int j=0;j<V;j++){
	   //     if(color[j]==-1){
	   //         q.push(j);
	   //         color[j]=0;
	   //         while(!q.empty()){
	   //         int node=q.front();
	   //         q.pop();
	   //         for(int i=0;i<adj[node].size();i++){
	   //             if(color[adj[node][i]]==-1){
	   //                 q.push(adj[node][i]);
	   //                 color[adj[node][i]]=(color[node]+1)%2;
	   //             }
	   //             else{
	   //                 if(color[adj[node][i]]==color[node])
	   //                     return 0;
	   //             }
	   //         }
	   //         }     
	   //     }
	   // }
	   // return 1;
	}

};
